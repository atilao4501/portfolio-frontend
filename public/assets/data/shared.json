{
  "personal": {
    "name": "Átila F. Alcântara",
    "brand": "atilao4501",
    "githubUsername": "atilao4501"
  },

  "links": {
    "github": "https://github.com/atilao4501",
    "linkedin": "https://www.linkedin.com/in/atilaalcantara/",
    "cv": "https://docs.google.com/document/d/1T4hQthApNgDcv7q9CneK2cq2cBB5Oa6b/edit?usp=sharing&ouid=105100534719446789564&rtpof=true&sd=true"
  },

  "contact": {
    "email": "atilafa2012@hotmail.com",
    "whatsapp": "+5562999001030"
  },

  "projects": [
    {
      "id": "popculturemashup",
      "title": {
        "pt": "PopCultureMashup - API de Recomendação Cross-Media",
        "en": "PopCultureMashup - Cross-Media Recommendation API"
      },
      "shortDescription": {
        "pt": "API que recomenda jogos e livros com base nas preferências do usuário, seguindo Clean Architecture.",
        "en": "API that recommends games and books based on user preferences, following Clean Architecture."
      },
      "features": {
        "pt": [
          "Autenticação com JWT e Refresh Tokens",
          "Integração resiliente com RAWG (jogos) e OpenLibrary (livros)",
          "Recomendações cruzadas (livro → jogo e jogo → livro)",
          "Containerização com Docker Compose"
        ],
        "en": [
          "Authentication with JWT and Refresh Tokens",
          "Resilient integration with RAWG (games) and OpenLibrary (books)",
          "Cross recommendations (book → game and game → book)",
          "Containerization with Docker Compose"
        ]
      },
      "skills": ["dotnet", "efcore", "sqlserver", "docker"],
      "links": {
        "github": "https://github.com/atilao4501/PopCultureMashup"
      }
    },
    {
      "id": "pairprogress",
      "title": {
        "pt": "PairProgress - Aplicativo de Produtividade (Full Stack)",
        "en": "PairProgress - Productivity App (Full Stack)"
      },
      "shortDescription": {
        "pt": "Aplicação de produtividade com backend .NET e frontend Angular.",
        "en": "Productivity app with .NET backend and Angular frontend."
      },
      "features": {
        "pt": [
          "API REST para tarefas e sessões de pareamento",
          "Frontend em Angular com deploy estático",
          "Integração com Swagger para exploração da API"
        ],
        "en": [
          "REST API for tasks and pair programming sessions",
          "Angular frontend with static deployment",
          "Swagger integration for API exploration"
        ]
      },
      "skills": ["dotnet", "angular", "sqlserver"],
      "links": {
        "github": "https://github.com/atilao4501/PairProgress.Backend",
        "site": "https://atilao4501.github.io/PairProgress/",
        "swagger": "https://pairprogress.runasp.net/swagger/index.html"
      }
    },
    {
      "id": "andreia-ferreira-clinic",
      "title": {
        "pt": "Andreia Ferreira Clinic - API de Agendamento",
        "en": "Andreia Ferreira Clinic - Scheduling API"
      },
      "shortDescription": {
        "pt": "API REST para agendar e gerenciar consultas de clínica.",
        "en": "REST API to schedule and manage clinic appointments."
      },
      "features": {
        "pt": [
          "CRUD de pacientes e consultas",
          "Camadas separadas para domínio e infraestrutura",
          "Pronta para servir clientes web/mobile"
        ],
        "en": [
          "CRUD for patients and appointments",
          "Separated layers for domain and infrastructure",
          "Ready to serve web/mobile clients"
        ]
      },
      "skills": ["dotnet", "efcore", "sqlserver", "docker"],
      "links": {
        "github": "https://github.com/atilao4501/AndreiaFerreiraClinica"
      }
    },
    {
      "id": "invillia-voucher-omnichannel",
      "title": {
        "pt": "Voucher Omnichannel (Grupo Casas Bahia)",
        "en": "Omnichannel Voucher (Casas Bahia Group)"
      },
      "shortDescription": {
        "pt": "Permite que um único voucher seja utilizado em todos os canais de venda (app, web, etc.).",
        "en": "Allows a single voucher to be used across all sales channels (app, web, etc.)."
      },
      "features": {
        "pt": [
          "Microsserviços distribuídos para emissão e validação de vouchers",
          "Cache de baixa latência para acelerar resgates",
          "Observabilidade com métricas e logs"
        ],
        "en": [
          "Distributed microservices for voucher issuance and validation",
          "Low-latency cache to speed up redemptions",
          "Observability with metrics and logs"
        ]
      },
      "skills": [
        "dotnet",
        "redis",
        "apachekafka",
        "kubernetes",
        "grafana",
        "docker"
      ]
    },
    {
      "id": "invillia-banking-integrations",
      "title": {
        "pt": "Integrações Bancárias (Bradesco & Itaú)",
        "en": "Banking Integrations (Bradesco & Itaú)"
      },
      "shortDescription": {
        "pt": "Integrações seguras e resilientes entre sistemas de varejo e grandes bancos brasileiros.",
        "en": "Secure and resilient integrations between retail systems and major Brazilian banks."
      },
      "features": {
        "pt": [
          "Mensageria assíncrona para fluxos confiáveis",
          "Reforço de segurança com autenticação baseada em tokens",
          "Circuit breakers e políticas de retry"
        ],
        "en": [
          "Asynchronous messaging for reliable flows",
          "Enhanced security with token-based authentication",
          "Circuit breakers and retry policies"
        ]
      },
      "skills": [
        "dotnet",
        "apachekafka",
        "redis",
        "kubernetes",
        "grafana",
        "docker"
      ]
    },
    {
      "id": "invillia-cobranded-card",
      "title": {
        "pt": "API de Criação de Cartão Co-branded",
        "en": "Co-branded Card Creation API"
      },
      "shortDescription": {
        "pt": "Serviço que gerencia o ciclo de vida de cartões co-branded (Casas Bahia + bancos).",
        "en": "Service that manages the lifecycle of co-branded cards (Casas Bahia + banks)."
      },
      "features": {
        "pt": [
          "Onboarding de parceiros e fluxos de emissão de cartões",
          "Trilhas de auditoria e logging estruturado",
          "Arquitetura de microsserviços escalável"
        ],
        "en": [
          "Partner onboarding and card issuance flows",
          "Audit trails and structured logging",
          "Scalable microservices architecture"
        ]
      },
      "skills": [
        "dotnet",
        "apachekafka",
        "redis",
        "kubernetes",
        "grafana",
        "docker"
      ]
    },
    {
      "id": "gav-portal-cliente",
      "title": {
        "pt": "GAV Resorts - Portal do Cliente (Backend)",
        "en": "GAV Resorts - Customer Portal (Backend)"
      },
      "shortDescription": {
        "pt": "Microsserviços para autoatendimento de clientes (faturas, extratos e agendamentos).",
        "en": "Microservices for customer self-service (invoices, statements, and scheduling)."
      },
      "features": {
        "pt": [
          "APIs RESTful de faturamento e extratos",
          "Migração de SQL Server para PostgreSQL",
          "Cache com Redis para reduzir latência",
          "Containerização para padronizar ambientes"
        ],
        "en": [
          "RESTful APIs for billing and statements",
          "Migration from SQL Server to PostgreSQL",
          "Redis cache to reduce latency",
          "Containerization for standardized environments"
        ]
      },
      "skills": [
        "dotnet",
        "efcore",
        "sqlserver",
        "postgresql",
        "redis",
        "docker"
      ]
    },
    {
      "id": "ecosync",
      "title": {
        "pt": "EcoSync - API de Monitoramento Ambiental",
        "en": "EcoSync - Environmental Monitoring API"
      },
      "shortDescription": {
        "pt": "API conceitual para ingestão e processamento de dados de sensores ambientais.",
        "en": "Conceptual API for ingesting and processing environmental sensor data."
      },
      "features": {
        "pt": [
          "Endpoints REST para receber telemetria",
          "Pipeline de validação e normalização de dados"
        ],
        "en": [
          "REST endpoints to receive telemetry",
          "Data validation and normalization pipeline"
        ]
      },
      "skills": ["dotnet", "aspnetcore"]
    },
    {
      "id": "m-adriane-ecommerce",
      "title": {
        "pt": "M.Adriane Joias - Loja Virtual",
        "en": "M.Adriane Jewelry - E-commerce Store"
      },
      "shortDescription": {
        "pt": "Implementação completa de loja virtual (domínio, tema e pagamentos).",
        "en": "Full implementation of e-commerce store (domain, theme, and payments)."
      },
      "features": {
        "pt": [
          "Configuração de domínio e SSL",
          "Catálogo e checkout",
          "Integração com meios de pagamento"
        ],
        "en": [
          "Domain and SSL setup",
          "Catalog and checkout",
          "Payment integration"
        ]
      },
      "skills": ["wordpress", "woocommerce"],
      "links": {
        "site": "https://madriane.com.br"
      }
    },
    {
      "id": "arte-doce-amigurumis",
      "title": {
        "pt": "Arte Doce Amigurumis - Loja Online",
        "en": "Arte Doce Amigurumis - Online Store"
      },
      "shortDescription": {
        "pt": "Canal de vendas para amigurumis artesanais com catálogo e pagamentos configurados.",
        "en": "Sales channel for handcrafted amigurumis with catalog and payment setup."
      },
      "features": {
        "pt": [
          "Configuração de catálogo de produtos",
          "Configuração de meios de pagamento"
        ],
        "en": ["Product catalog setup", "Payment setup"]
      },
      "skills": ["wordpress", "woocommerce"],
      "links": {
        "site": "https://artedoce.fivecard.com.br"
      }
    }
  ],

  "certifications": [
    {
      "id": "azure-fundamentals",
      "name": "Azure Fundamentals",
      "issuer": "Microsoft",
      "year": "2024"
    }
  ],

  "skills": [
    {
      "id": "dotnet",
      "name": ".NET",
      "type": "backend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/dotnetcore/dotnetcore-original.svg"
      }
    },
    {
      "id": "csharp",
      "name": "C#",
      "type": "backend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/csharp/csharp-original.svg"
      }
    },
    {
      "id": "aspnetcore",
      "name": "ASP.NET Core",
      "type": "backend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/dotnetcore/dotnetcore-original.svg"
      }
    },
    {
      "id": "efcore",
      "name": "Entity Framework Core",
      "type": "backend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/dotnetcore/dotnetcore-original.svg"
      }
    },
    {
      "id": "python",
      "name": "Python",
      "type": "backend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/python/python-original.svg"
      }
    },
    {
      "id": "sqlserver",
      "name": "SQL Server",
      "type": "database",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/microsoftsqlserver/microsoftsqlserver-plain.svg"
      }
    },
    {
      "id": "postgresql",
      "name": "PostgreSQL",
      "type": "database",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/postgresql/postgresql-original.svg"
      }
    },
    {
      "id": "mongodb",
      "name": "MongoDB",
      "type": "database",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mongodb/mongodb-original.svg"
      }
    },
    {
      "id": "redis",
      "name": "Redis",
      "type": "database",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/redis/redis-original.svg"
      }
    },
    {
      "id": "mysql",
      "name": "MySQL",
      "type": "database",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mysql/mysql-original.svg"
      }
    },
    {
      "id": "angular",
      "name": "Angular",
      "type": "frontend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/angular/angular-original.svg"
      }
    },
    {
      "id": "typescript",
      "name": "TypeScript",
      "type": "frontend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/typescript/typescript-original.svg"
      }
    },
    {
      "id": "javascript",
      "name": "JavaScript",
      "type": "frontend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg"
      }
    },
    {
      "id": "htmlcss",
      "name": "HTML/CSS",
      "type": "frontend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg"
      }
    },
    {
      "id": "wordpress",
      "name": "WordPress",
      "type": "frontend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/wordpress/wordpress-original.svg"
      }
    },
    {
      "id": "woocommerce",
      "name": "WooCommerce",
      "type": "frontend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/woocommerce/woocommerce-original.svg"
      }
    },
    {
      "id": "flutter",
      "name": "Flutter",
      "type": "frontend",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/flutter/flutter-original.svg"
      }
    },
    {
      "id": "docker",
      "name": "Docker",
      "type": "devops",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/docker/docker-original.svg"
      }
    },
    {
      "id": "kubernetes",
      "name": "Kubernetes",
      "type": "devops",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/kubernetes/kubernetes-plain.svg"
      }
    },
    {
      "id": "nginx",
      "name": "NGINX",
      "type": "devops",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nginx/nginx-original.svg"
      }
    },
    {
      "id": "githubactions",
      "name": "GitHub Actions",
      "type": "devops",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/githubactions/githubactions-plain.svg"
      }
    },
    {
      "id": "apachekafka",
      "name": "Apache Kafka",
      "type": "devops",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/apachekafka/apachekafka-original.svg"
      }
    },
    {
      "id": "git",
      "name": "Git",
      "type": "tools",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/git/git-original.svg"
      }
    },
    {
      "id": "github",
      "name": "GitHub",
      "type": "tools",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/github/github-original.svg"
      }
    },
    {
      "id": "azure",
      "name": "Azure DevOps",
      "type": "tools",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/azuredevops/azuredevops-plain.svg"
      }
    },
    {
      "id": "serilog",
      "name": "Serilog",
      "type": "tools",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/logstash.svg"
      }
    },
    {
      "id": "scrum",
      "name": "Scrum",
      "type": "tools",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/jira/jira-original.svg"
      }
    },
    {
      "id": "kanban",
      "name": "Kanban",
      "type": "tools",
      "svg": {
        "url": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/trello/trello-plain.svg"
      }
    }
  ]
}
